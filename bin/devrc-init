#!/bin/zsh

PROJECT_DIR=$(pwd)

read "?Enter tmux session name (default: $(basename "$PROJECT_DIR")): " SESSION_NAME
SESSION_NAME=${SESSION_NAME:-$(basename "$PROJECT_DIR")}

read "?Which editor do you use? (nvim/code/zed/hx) [nvim]: " EDITOR_CMD
EDITOR_CMD=${EDITOR_CMD:-nvim}

read "?Do you want to create 'client/' and 'server/' folders? (Y/n): " CREATE_FOLDERS
CREATE_FOLDERS=${CREATE_FOLDERS:-y}
if [[ "$CREATE_FOLDERS" =~ ^[Yy]$ ]]; then
  for folder in client server; do
    if [ ! -d "$PROJECT_DIR/$folder" ]; then
      mkdir -p "$PROJECT_DIR/$folder"
      echo "üìÅ Created: $folder/"
    else
      echo "‚úîÔ∏è Exists: $folder/"
    fi
  done
fi

read "?Initialize a Git repo with first commit? (Y/n): " INIT_GIT
INIT_GIT=${INIT_GIT:-y}
if [[ "$INIT_GIT" =~ ^[Yy]$ ]]; then
  git init
  echo ".DS_Store\nnode_modules\n.env" > .gitignore
  git add .
  git commit -m "Initial commit"
  echo "‚úÖ Git initialized and committed."
fi

read "?Create README.md with project name? (Y/n): " CREATE_README
CREATE_README=${CREATE_README:-y}
if [[ "$CREATE_README" =~ ^[Yy]$ ]]; then
  echo "# $SESSION_NAME" > "$PROJECT_DIR/README.md"
  echo "\nüöÄ Bootstrapped with devrc-init" >> "$PROJECT_DIR/README.md"
  echo "‚úÖ README.md created."
fi

# Create .devrc
cat > "$PROJECT_DIR/.devrc" <<EOF
# .devrc ‚Äî generated by devrc-init

export PROJECT_DIR="$PROJECT_DIR"
export DEV_SCRIPT="\$PROJECT_DIR/start-dev.sh"
export DEV_SESSION="$SESSION_NAME"

export CLIENT_DIR="client"
export SERVER_DIR="server"
export CLIENT_CMD="yarn dev"
export SERVER_CMD="yarn dev"
export DB_CMD="prisma studio"
export TEST_CMD="yarn test"
export DOCKER_CMD="docker-compose up"
export EDITOR_CMD="$EDITOR_CMD"

alias devva="\$DEV_SCRIPT"
alias devstop='tmux-resurrect-save && tmux kill-server && echo "‚úÖ Session saved and tmux stopped."'
alias devresume="tmux new-session -d -s _restore && tmux-resurrect-restore && tmux kill-session -t _restore && tmux attach"
alias devup='tmux has-session -t \$DEV_SESSION 2>/dev/null && tmux attach -t \$DEV_SESSION || devresume'
EOF

echo "‚úÖ .devrc created."

# Ask to create start-dev.sh
read "?Create starter start-dev.sh? (Y/n): " CREATE_SCRIPT
CREATE_SCRIPT=${CREATE_SCRIPT:-y}
if [[ "$CREATE_SCRIPT" =~ ^[Yy]$ ]]; then
cat > "$PROJECT_DIR/start-dev.sh" <<'EOS'
#!/bin/zsh

source "$PROJECT_DIR/dev.env" 2>/dev/null || source "$PROJECT_DIR/.devrc"

check_folders() {
  local missing=0
  for dir in "$CLIENT_DIR" "$SERVER_DIR"; do
    if [ ! -d "$PROJECT_DIR/$dir" ]; then
      echo "‚ö†Ô∏è  Missing: '$dir/' in $PROJECT_DIR"
      missing=1
    fi
  done
  if [ $missing -eq 1 ]; then
    echo "‚ùå Cannot continue ‚Äî create missing folders."
    exit 1
  fi
}

check_folders

tmux new-session -d -s $DEV_SESSION -c $PROJECT_DIR -n code
tmux send-keys -t $DEV_SESSION:code "$EDITOR_CMD ." C-m

tmux new-window -t $DEV_SESSION:1 -n $SERVER_DIR -c "$PROJECT_DIR/$SERVER_DIR"
tmux send-keys -t $DEV_SESSION:1 "$SERVER_CMD" C-m

tmux new-window -t $DEV_SESSION:2 -n $CLIENT_DIR -c "$PROJECT_DIR/$CLIENT_DIR"
tmux send-keys -t $DEV_SESSION:2 "$CLIENT_CMD" C-m

tmux new-window -t $DEV_SESSION:3 -n db -c $PROJECT_DIR
tmux send-keys -t $DEV_SESSION:3 "$DB_CMD" C-m
tmux split-window -v -t $DEV_SESSION:3
tmux send-keys -t $DEV_SESSION:3.1 "redis-cli" C-m

tmux new-window -t $DEV_SESSION:4 -n test -c "$PROJECT_DIR"
tmux send-keys -t $DEV_SESSION:4 "$TEST_CMD" C-m

tmux new-window -t $DEV_SESSION:5 -n misc -c "$PROJECT_DIR"
tmux send-keys -t $DEV_SESSION:5 "clear" C-m

tmux new-window -t $DEV_SESSION:6 -n docker -c "$PROJECT_DIR"
tmux send-keys -t $DEV_SESSION:6 "$DOCKER_CMD" C-m

tmux select-window -t $DEV_SESSION:0
tmux attach-session -t $DEV_SESSION
EOS

  chmod +x "$PROJECT_DIR/start-dev.sh"
  echo "‚úÖ start-dev.sh created and made executable."
fi
